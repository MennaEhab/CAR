
gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000058c  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800064  00800064  00000624  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d87  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000278  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000029bb  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000882  00000000  00000000  000039e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000080d  00000000  00000000  0000426b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000568  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c28  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012ad  00000000  00000000  00005c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000228  00000000  00000000  00006eb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
		switch (en_led_id)
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		{
			case 0:
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			break;
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			case 1:
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_11>
			gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			break;
			case 2:
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			break;
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
			case 3:
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
			gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 01 	call	0x342	; 0x342 <main>
			}
		}
		
	
	
}
  8a:	0c 94 c4 02 	jmp	0x588	; 0x588 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MotorDC_Init>:
  92:	ef 92       	push	r14
  94:	0f 93       	push	r16
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
  9a:	ee 24       	eor	r14, r14
  9c:	e3 94       	inc	r14
  9e:	00 e0       	ldi	r16, 0x00	; 0
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	44 e0       	ldi	r20, 0x04	; 4
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
#include "dcMotor.h"


void MotorDC_Init(En_motorType_t en_motor_number)
{
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_256, 0, 0, T0_INTERRUPT_NORMAL);
  a8:	0e 94 1c 02 	call	0x438	; 0x438 <timer0Init>
		switch (en_motor_number)
  ac:	cc 23       	and	r28, r28
  ae:	19 f0       	breq	.+6      	; 0xb6 <MotorDC_Init+0x24>
  b0:	c1 30       	cpi	r28, 0x01	; 1
  b2:	f1 f5       	brne	.+124    	; 0x130 <MotorDC_Init+0x9e>
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <MotorDC_Init+0x62>
		{
			case MOT_1:
				gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
  c0:	4f ef       	ldi	r20, 0xFF	; 255
  c2:	68 e0       	ldi	r22, 0x08	; 8
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <gpioPinDirection>
				gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	60 e1       	ldi	r22, 0x10	; 16
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <gpioPinDirection>
				gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	68 e0       	ldi	r22, 0x08	; 8
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, LOW);
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	60 e1       	ldi	r22, 0x10	; 16
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
	
			break;
  f2:	1e c0       	rjmp	.+60     	; 0x130 <MotorDC_Init+0x9e>
			case MOT_2:
				gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
  f4:	4f ef       	ldi	r20, 0xFF	; 255
  f6:	60 e4       	ldi	r22, 0x40	; 64
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
  fe:	4f ef       	ldi	r20, 0xFF	; 255
 100:	60 e8       	ldi	r22, 0x80	; 128
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	0e 94 f7 00 	call	0x1ee	; 0x1ee <gpioPinDirection>
				gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	60 e2       	ldi	r22, 0x20	; 32
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <gpioPinDirection>
				gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	60 e4       	ldi	r22, 0x40	; 64
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	60 e8       	ldi	r22, 0x80	; 128
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, LOW);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	60 e2       	ldi	r22, 0x20	; 32
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			default:
			break;
		}
		
	
}
 130:	cf 91       	pop	r28
 132:	0f 91       	pop	r16
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <MotorDC_Dir>:
 * @param 
 */
void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{

	  switch (en_motor_number)
 138:	88 23       	and	r24, r24
 13a:	21 f0       	breq	.+8      	; 0x144 <MotorDC_Dir+0xc>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	09 f0       	breq	.+2      	; 0x142 <MotorDC_Dir+0xa>
 140:	4f c0       	rjmp	.+158    	; 0x1e0 <MotorDC_Dir+0xa8>
 142:	28 c0       	rjmp	.+80     	; 0x194 <MotorDC_Dir+0x5c>
	  {
//////////motor1///////////
		  case MOT_1:
		  switch (en_motor_dir)
 144:	61 30       	cpi	r22, 0x01	; 1
 146:	29 f0       	breq	.+10     	; 0x152 <MotorDC_Dir+0x1a>
 148:	d0 f0       	brcs	.+52     	; 0x17e <MotorDC_Dir+0x46>
 14a:	62 30       	cpi	r22, 0x02	; 2
 14c:	09 f0       	breq	.+2      	; 0x150 <MotorDC_Dir+0x18>
 14e:	48 c0       	rjmp	.+144    	; 0x1e0 <MotorDC_Dir+0xa8>
 150:	0b c0       	rjmp	.+22     	; 0x168 <MotorDC_Dir+0x30>
		  {
			  case FORWARD:
				gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, HIGH);
 152:	4f ef       	ldi	r20, 0xFF	; 255
 154:	64 e0       	ldi	r22, 0x04	; 4
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	68 e0       	ldi	r22, 0x08	; 8
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			  break;
 166:	08 95       	ret
			  case BACKWARD:
				gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	64 e0       	ldi	r22, 0x04	; 4
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, HIGH);
 172:	4f ef       	ldi	r20, 0xFF	; 255
 174:	68 e0       	ldi	r22, 0x08	; 8
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			 break;
 17c:	08 95       	ret
			  case STOP:
				gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	68 e0       	ldi	r22, 0x08	; 8
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			  break;
 192:	08 95       	ret
		  }
		  break;
		  
////////motor2//////////
		  case MOT_2:
		  switch (en_motor_dir)
 194:	61 30       	cpi	r22, 0x01	; 1
 196:	21 f0       	breq	.+8      	; 0x1a0 <MotorDC_Dir+0x68>
 198:	c8 f0       	brcs	.+50     	; 0x1cc <MotorDC_Dir+0x94>
 19a:	62 30       	cpi	r22, 0x02	; 2
 19c:	09 f5       	brne	.+66     	; 0x1e0 <MotorDC_Dir+0xa8>
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <MotorDC_Dir+0x7e>
		  {
			  case FORWARD:
				gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, HIGH);
 1a0:	4f ef       	ldi	r20, 0xFF	; 255
 1a2:	60 e4       	ldi	r22, 0x40	; 64
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	60 e8       	ldi	r22, 0x80	; 128
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			  break;
 1b4:	08 95       	ret
			  case BACKWARD:
				gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	60 e4       	ldi	r22, 0x40	; 64
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, HIGH);
 1c0:	4f ef       	ldi	r20, 0xFF	; 255
 1c2:	60 e8       	ldi	r22, 0x80	; 128
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			  break;
 1ca:	08 95       	ret
			  case STOP:
				gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	60 e4       	ldi	r22, 0x40	; 64
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
 1e0:	08 95       	ret

000001e2 <MotorDC_Speed_PollingWithT0>:
 * Description: 
 * @param 
 */
void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
	timer0SwPWM(u8_motor_speed,200,MOTOR_EN_1_BIT,MOTOR_EN_2_BIT);
 1e2:	20 e2       	ldi	r18, 0x20	; 32
 1e4:	40 e1       	ldi	r20, 0x10	; 16
 1e6:	68 ec       	ldi	r22, 0xC8	; 200
 1e8:	0e 94 33 02 	call	0x466	; 0x466 <timer0SwPWM>
 1ec:	08 95       	ret

000001ee <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
		switch (u8_port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	81 f0       	breq	.+32     	; 0x212 <gpioPinDirection+0x24>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <gpioPinDirection+0x10>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	b9 f0       	breq	.+46     	; 0x226 <gpioPinDirection+0x38>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	41 f5       	brne	.+80     	; 0x24c <gpioPinDirection+0x5e>
 1fc:	1e c0       	rjmp	.+60     	; 0x23a <gpioPinDirection+0x4c>
		{
			case 0:
			PORTA_DIR = PORTA_DIR & (~u8_pins);
 1fe:	8a b3       	in	r24, 0x1a	; 26
 200:	96 2f       	mov	r25, r22
 202:	90 95       	com	r25
 204:	89 23       	and	r24, r25
 206:	8a bb       	out	0x1a, r24	; 26
			PORTA_DIR = PORTA_DIR |(u8_pins & u8_direction);
 208:	8a b3       	in	r24, 0x1a	; 26
 20a:	64 23       	and	r22, r20
 20c:	68 2b       	or	r22, r24
 20e:	6a bb       	out	0x1a, r22	; 26
			break;
 210:	08 95       	ret
			case 1:
			PORTB_DIR = PORTB_DIR & (~u8_pins);
 212:	87 b3       	in	r24, 0x17	; 23
 214:	96 2f       	mov	r25, r22
 216:	90 95       	com	r25
 218:	89 23       	and	r24, r25
 21a:	87 bb       	out	0x17, r24	; 23
			PORTB_DIR = PORTB_DIR |(u8_pins & u8_direction);
 21c:	87 b3       	in	r24, 0x17	; 23
 21e:	64 23       	and	r22, r20
 220:	68 2b       	or	r22, r24
 222:	67 bb       	out	0x17, r22	; 23
			break;
 224:	08 95       	ret
			case 2:
			PORTC_DIR = PORTC_DIR & (~u8_pins);
 226:	84 b3       	in	r24, 0x14	; 20
 228:	96 2f       	mov	r25, r22
 22a:	90 95       	com	r25
 22c:	89 23       	and	r24, r25
 22e:	84 bb       	out	0x14, r24	; 20
			PORTC_DIR = PORTC_DIR |(u8_pins & u8_direction);
 230:	84 b3       	in	r24, 0x14	; 20
 232:	64 23       	and	r22, r20
 234:	68 2b       	or	r22, r24
 236:	64 bb       	out	0x14, r22	; 20
			break;
 238:	08 95       	ret
			case 3:
			PORTD_DIR = PORTD_DIR & (~u8_pins);
 23a:	81 b3       	in	r24, 0x11	; 17
 23c:	96 2f       	mov	r25, r22
 23e:	90 95       	com	r25
 240:	89 23       	and	r24, r25
 242:	81 bb       	out	0x11, r24	; 17
			PORTD_DIR = PORTD_DIR |(u8_pins & u8_direction);
 244:	81 b3       	in	r24, 0x11	; 17
 246:	64 23       	and	r22, r20
 248:	68 2b       	or	r22, r24
 24a:	61 bb       	out	0x11, r22	; 17
 24c:	08 95       	ret

0000024e <gpioPinWrite>:
 * 				- BIT7
 * @param value
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
			switch (u8_port)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	81 f0       	breq	.+32     	; 0x272 <gpioPinWrite+0x24>
 252:	28 f0       	brcs	.+10     	; 0x25e <gpioPinWrite+0x10>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	b9 f0       	breq	.+46     	; 0x286 <gpioPinWrite+0x38>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	41 f5       	brne	.+80     	; 0x2ac <gpioPinWrite+0x5e>
 25c:	1e c0       	rjmp	.+60     	; 0x29a <gpioPinWrite+0x4c>
			{
				case 0:
				PORTA_DATA = PORTA_DATA & (~u8_pins);
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	96 2f       	mov	r25, r22
 262:	90 95       	com	r25
 264:	89 23       	and	r24, r25
 266:	8b bb       	out	0x1b, r24	; 27
				PORTA_DATA = PORTA_DATA |(u8_pins & u8_value);
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	64 23       	and	r22, r20
 26c:	68 2b       	or	r22, r24
 26e:	6b bb       	out	0x1b, r22	; 27
				break;
 270:	08 95       	ret
				case 1:
				PORTB_DATA = PORTB_DATA & (~u8_pins);
 272:	88 b3       	in	r24, 0x18	; 24
 274:	96 2f       	mov	r25, r22
 276:	90 95       	com	r25
 278:	89 23       	and	r24, r25
 27a:	88 bb       	out	0x18, r24	; 24
				PORTB_DATA = PORTB_DATA |(u8_pins & u8_value);
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	64 23       	and	r22, r20
 280:	68 2b       	or	r22, r24
 282:	68 bb       	out	0x18, r22	; 24
				break;
 284:	08 95       	ret
				case 2:
				PORTC_DATA = PORTC_DATA & (~u8_pins);
 286:	85 b3       	in	r24, 0x15	; 21
 288:	96 2f       	mov	r25, r22
 28a:	90 95       	com	r25
 28c:	89 23       	and	r24, r25
 28e:	85 bb       	out	0x15, r24	; 21
				PORTC_DATA = PORTC_DATA |(u8_pins & u8_value);
 290:	85 b3       	in	r24, 0x15	; 21
 292:	64 23       	and	r22, r20
 294:	68 2b       	or	r22, r24
 296:	65 bb       	out	0x15, r22	; 21
				break;
 298:	08 95       	ret
				case 3:
				PORTD_DATA = PORTD_DATA & (~u8_pins);
 29a:	82 b3       	in	r24, 0x12	; 18
 29c:	96 2f       	mov	r25, r22
 29e:	90 95       	com	r25
 2a0:	89 23       	and	r24, r25
 2a2:	82 bb       	out	0x12, r24	; 18
				PORTD_DATA = PORTD_DATA |(u8_pins & u8_value);
 2a4:	82 b3       	in	r24, 0x12	; 18
 2a6:	64 23       	and	r22, r20
 2a8:	68 2b       	or	r22, r24
 2aa:	62 bb       	out	0x12, r22	; 18
 2ac:	08 95       	ret

000002ae <MOTOR>:

void MOTOR(void)
{

//Motor_init();
MotorDC_Init(MOT_1);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
MotorDC_Init(MOT_2);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
timer2Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64, 0, 0, 0,T0_POLLING); // for delay
 2ba:	c1 2c       	mov	r12, r1
 2bc:	e1 2c       	mov	r14, r1
 2be:	00 e0       	ldi	r16, 0x00	; 0
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	43 e0       	ldi	r20, 0x03	; 3
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 46 02 	call	0x48c	; 0x48c <timer2Init>

SREG= SREG |0x80 ;// enable global interrupt
 2cc:	8f b7       	in	r24, 0x3f	; 63
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8f bf       	out	0x3f, r24	; 63

	int speed=0;
	MotorDC_Dir(MOT_1, FORWARD);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 9c 00 	call	0x138	; 0x138 <MotorDC_Dir>
	MotorDC_Dir(MOT_2, FORWARD);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 9c 00 	call	0x138	; 0x138 <MotorDC_Dir>
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
	
	for (speed=0; speed<100;speed++)  // 5 second from %0 to %100
	{
		timer2DelayMs(50);
 2e4:	82 e3       	ldi	r24, 0x32	; 50
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer2DelayMs>
		MotorDC_Speed_PollingWithT0(speed);
 2ec:	8c 2f       	mov	r24, r28
 2ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <MotorDC_Speed_PollingWithT0>
 2f2:	cf 5f       	subi	r28, 0xFF	; 255

	int speed=0;
	MotorDC_Dir(MOT_1, FORWARD);
	MotorDC_Dir(MOT_2, FORWARD);
	
	for (speed=0; speed<100;speed++)  // 5 second from %0 to %100
 2f4:	c4 36       	cpi	r28, 0x64	; 100
 2f6:	b1 f7       	brne	.-20     	; 0x2e4 <MOTOR+0x36>
		timer2DelayMs(50);
		MotorDC_Speed_PollingWithT0(speed);
	}
	for (speed=100; speed>0;speed--) // 5 second from %100 to %0
	{
		timer2DelayMs(50);
 2f8:	82 e3       	ldi	r24, 0x32	; 50
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer2DelayMs>
		MotorDC_Speed_PollingWithT0(speed);
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <MotorDC_Speed_PollingWithT0>
 306:	c1 50       	subi	r28, 0x01	; 1
	for (speed=0; speed<100;speed++)  // 5 second from %0 to %100
	{
		timer2DelayMs(50);
		MotorDC_Speed_PollingWithT0(speed);
	}
	for (speed=100; speed>0;speed--) // 5 second from %100 to %0
 308:	b9 f7       	brne	.-18     	; 0x2f8 <MOTOR+0x4a>
	{
		timer2DelayMs(50);
		MotorDC_Speed_PollingWithT0(speed);
	}
	
		MotorDC_Dir(MOT_1, BACKWARD);  //Motor_direction(Right);
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 9c 00 	call	0x138	; 0x138 <MotorDC_Dir>
		MotorDC_Dir(MOT_2, FORWARD);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 9c 00 	call	0x138	; 0x138 <MotorDC_Dir>
 31a:	c5 e5       	ldi	r28, 0x55	; 85
 31c:	d0 e0       	ldi	r29, 0x00	; 0

	
	for (speed=0; speed<85;speed++) // .5 second to turn right 
	{
		timer2DelayMs(10);
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer2DelayMs>
		MotorDC_Speed_PollingWithT0(25);
 326:	89 e1       	ldi	r24, 0x19	; 25
 328:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <MotorDC_Speed_PollingWithT0>
 32c:	21 97       	sbiw	r28, 0x01	; 1
	
		MotorDC_Dir(MOT_1, BACKWARD);  //Motor_direction(Right);
		MotorDC_Dir(MOT_2, FORWARD);

	
	for (speed=0; speed<85;speed++) // .5 second to turn right 
 32e:	b9 f7       	brne	.-18     	; 0x31e <MOTOR+0x70>
		timer2DelayMs(10);
		MotorDC_Speed_PollingWithT0(25);
	}


	MotorDC_Dir(MOT_1, STOP);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 9c 00 	call	0x138	; 0x138 <MotorDC_Dir>
	MotorDC_Dir(MOT_2, STOP);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 9c 00 	call	0x138	; 0x138 <MotorDC_Dir>
 340:	ff cf       	rjmp	.-2      	; 0x340 <MOTOR+0x92>

00000342 <main>:
		case Traffic_light:
		 Traffic_light_fun();		
		break;
		
		case Motor:
		MOTOR();
 342:	0e 94 57 01 	call	0x2ae	; 0x2ae <MOTOR>

00000346 <__vector_11>:




ISR(TIMER0_OVF_vector)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	static volatile uint8_t flag =0;
	if(spwm_duty_cycle==0)
 368:	80 91 65 00 	lds	r24, 0x0065
 36c:	90 91 66 00 	lds	r25, 0x0066
 370:	a0 91 67 00 	lds	r26, 0x0067
 374:	b0 91 68 00 	lds	r27, 0x0068
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	a1 05       	cpc	r26, r1
 37c:	b1 05       	cpc	r27, r1
 37e:	69 f4       	brne	.+26     	; 0x39a <__vector_11+0x54>
	{
		gpioPinWrite(MOTOR_EN_1_GPIO, spwm_pin_1, LOW);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	60 91 61 00 	lds	r22, 0x0061
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
		gpioPinWrite(MOTOR_EN_2_GPIO, spwm_pin_2, LOW);
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	60 91 60 00 	lds	r22, 0x0060
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
 398:	3e c0       	rjmp	.+124    	; 0x416 <__vector_11+0xd0>

	}else
	{
		if (spwm_duty_cycle==100)
 39a:	84 36       	cpi	r24, 0x64	; 100
 39c:	91 05       	cpc	r25, r1
 39e:	a1 05       	cpc	r26, r1
 3a0:	b1 05       	cpc	r27, r1
 3a2:	69 f4       	brne	.+26     	; 0x3be <__vector_11+0x78>
		{
	      gpioPinWrite(MOTOR_EN_1_GPIO, spwm_pin_1, HIGH);
 3a4:	4f ef       	ldi	r20, 0xFF	; 255
 3a6:	60 91 61 00 	lds	r22, 0x0061
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
	      gpioPinWrite(MOTOR_EN_2_GPIO, spwm_pin_2, HIGH);
 3b0:	4f ef       	ldi	r20, 0xFF	; 255
 3b2:	60 91 60 00 	lds	r22, 0x0060
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
 3bc:	2c c0       	rjmp	.+88     	; 0x416 <__vector_11+0xd0>
		}else
		{
			if(flag==0)
 3be:	80 91 64 00 	lds	r24, 0x0064
 3c2:	81 11       	cpse	r24, r1
 3c4:	15 c0       	rjmp	.+42     	; 0x3f0 <__vector_11+0xaa>
			{
			    gpioPinWrite(MOTOR_EN_1_GPIO, spwm_pin_1, HIGH);
 3c6:	4f ef       	ldi	r20, 0xFF	; 255
 3c8:	60 91 61 00 	lds	r22, 0x0061
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
		        gpioPinWrite(MOTOR_EN_2_GPIO, spwm_pin_2, HIGH);
 3d2:	4f ef       	ldi	r20, 0xFF	; 255
 3d4:	60 91 60 00 	lds	r22, 0x0060
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				TCNT0=55+(200 - (spwm_duty_cycle*2));
 3de:	80 91 65 00 	lds	r24, 0x0065
 3e2:	88 0f       	add	r24, r24
 3e4:	80 95       	com	r24
 3e6:	82 bf       	out	0x32, r24	; 50
				flag=1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 64 00 	sts	0x0064, r24
 3ee:	13 c0       	rjmp	.+38     	; 0x416 <__vector_11+0xd0>
			}else
			{
			    gpioPinWrite(MOTOR_EN_1_GPIO, spwm_pin_1, LOW);
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	60 91 61 00 	lds	r22, 0x0061
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
			    gpioPinWrite(MOTOR_EN_2_GPIO, spwm_pin_2, LOW);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	60 91 60 00 	lds	r22, 0x0060
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 27 01 	call	0x24e	; 0x24e <gpioPinWrite>
				TCNT0=55+(spwm_duty_cycle*2);
 408:	80 91 65 00 	lds	r24, 0x0065
 40c:	88 0f       	add	r24, r24
 40e:	89 5c       	subi	r24, 0xC9	; 201
 410:	82 bf       	out	0x32, r24	; 50
				flag=0;
 412:	10 92 64 00 	sts	0x0064, r1

			
		}
	}

 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <timer0Init>:
 * @param initialValue
 * @param outputCompare
 * @param interruptMask
 */
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
 438:	ef 92       	push	r14
 43a:	0f 93       	push	r16
	
	TCCR0= TCCR0 | en_mode;
 43c:	93 b7       	in	r25, 0x33	; 51
 43e:	98 2b       	or	r25, r24
 440:	93 bf       	out	0x33, r25	; 51
	TCCR0= TCCR0 | en_OC0;
 442:	93 b7       	in	r25, 0x33	; 51
 444:	69 2b       	or	r22, r25
 446:	63 bf       	out	0x33, r22	; 51
	TCCR0= TCCR0 | en_prescal;		
 448:	93 b7       	in	r25, 0x33	; 51
 44a:	94 2b       	or	r25, r20
 44c:	93 bf       	out	0x33, r25	; 51
	
	TIMSK = TIMSK |  en_interruptMask;
 44e:	99 b7       	in	r25, 0x39	; 57
 450:	e9 2a       	or	r14, r25
 452:	e9 be       	out	0x39, r14	; 57
	
	TCNT0 = u8_initialValue;
 454:	22 bf       	out	0x32, r18	; 50
	
	OCR0 = u8_outputCompare;
 456:	0c bf       	out	0x3c, r16	; 60
	
	TIMER0_PRESCALER= en_prescal;
 458:	40 93 62 00 	sts	0x0062, r20
	
	TIMER0_MODE= en_mode; 
 45c:	80 93 69 00 	sts	0x0069, r24
	
}
 460:	0f 91       	pop	r16
 462:	ef 90       	pop	r14
 464:	08 95       	ret

00000466 <timer0SwPWM>:
 * Description:
 * @param dutyCycle
 */
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency,EN_bits_t swpwm_pin_1,EN_bits_t swpwm_pin_2)
{
	 spwm_duty_cycle= u8_dutyCycle;
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	a0 e0       	ldi	r26, 0x00	; 0
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	80 93 65 00 	sts	0x0065, r24
 470:	90 93 66 00 	sts	0x0066, r25
 474:	a0 93 67 00 	sts	0x0067, r26
 478:	b0 93 68 00 	sts	0x0068, r27
	spwm_pin_1= swpwm_pin_1;
 47c:	40 93 61 00 	sts	0x0061, r20
	spwm_pin_2= swpwm_pin_2;	
 480:	20 93 60 00 	sts	0x0060, r18
 484:	08 95       	ret

00000486 <timer1Set>:
 * Description:
 * @param value
 */
void timer1Set(uint16_t u16_value)
{
	TCNT1 =u16_value;	
 486:	9d bd       	out	0x2d, r25	; 45
 488:	8c bd       	out	0x2c, r24	; 44
 48a:	08 95       	ret

0000048c <timer2Init>:
 * @param initialValue
 * @param outputCompare
 * @param interruptMask
 */
void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
 48c:	cf 92       	push	r12
 48e:	0f 93       	push	r16
	TCCR1= TCCR1 | en_mode;
 490:	ee b5       	in	r30, 0x2e	; 46
 492:	ff b5       	in	r31, 0x2f	; 47
 494:	e8 2b       	or	r30, r24
 496:	ff bd       	out	0x2f, r31	; 47
 498:	ee bd       	out	0x2e, r30	; 46
	TCCR1= TCCR1 | en_OC;
 49a:	ee b5       	in	r30, 0x2e	; 46
 49c:	ff b5       	in	r31, 0x2f	; 47
 49e:	df 01       	movw	r26, r30
 4a0:	a6 2b       	or	r26, r22
 4a2:	bd 01       	movw	r22, r26
 4a4:	7f bd       	out	0x2f, r23	; 47
 4a6:	6e bd       	out	0x2e, r22	; 46
	TCCR1= TCCR1 | en_prescal;
 4a8:	6e b5       	in	r22, 0x2e	; 46
 4aa:	7f b5       	in	r23, 0x2f	; 47
 4ac:	fb 01       	movw	r30, r22
 4ae:	e4 2b       	or	r30, r20
 4b0:	af 01       	movw	r20, r30
 4b2:	5f bd       	out	0x2f, r21	; 47
 4b4:	4e bd       	out	0x2e, r20	; 46
	
	TIMSK = TIMSK |  en_interruptMask;
 4b6:	99 b7       	in	r25, 0x39	; 57
 4b8:	c9 2a       	or	r12, r25
 4ba:	c9 be       	out	0x39, r12	; 57
	
	TCNT2 = u8_initialValue;
 4bc:	24 bd       	out	0x24, r18	; 36
	
	OCR2 = u8_outputCompare;
 4be:	03 bd       	out	0x23, r16	; 35
	
	//	TIMER0_PRESCALER= en_prescal;
	
	TIMER2_MODE= en_mode;	
 4c0:	80 93 6c 00 	sts	0x006C, r24
	
	
}
 4c4:	0f 91       	pop	r16
 4c6:	cf 90       	pop	r12
 4c8:	08 95       	ret

000004ca <timer2Start>:
/**
 * Description:
 */
void timer2Start(void)
{
TCCR2 = TCCR2 | TIMER2_PRESCALER;	
 4ca:	85 b5       	in	r24, 0x25	; 37
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	85 bd       	out	0x25, r24	; 37
 4d0:	08 95       	ret

000004d2 <timer2Stop>:
/**
 * Description:
 */
void timer2Stop(void)
{
TCCR2 = T2_CLOCK_MASK & T2_NO_CLOCK;	
 4d2:	15 bc       	out	0x25, r1	; 37
 4d4:	08 95       	ret

000004d6 <timer2DelayMs>:
/**
 * Description:
 * @param delay
 */
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
 4d6:	8f 92       	push	r8
 4d8:	9f 92       	push	r9
 4da:	af 92       	push	r10
 4dc:	bf 92       	push	r11
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	4c 01       	movw	r8, r24
	uint32_t index=0;
	uint32_t Number_of_tick_per_ms =0;
	
	Number_of_tick_per_ms= FCPU /(64000) ; //64 * 1000 // prescaler 64
	
	if(TIMER1_MODE == T1_NORMAL_MODE) //
 4e8:	20 91 6a 00 	lds	r18, 0x006A
 4ec:	30 91 6b 00 	lds	r19, 0x006B
 4f0:	23 2b       	or	r18, r19
 4f2:	19 f5       	brne	.+70     	; 0x53a <timer2DelayMs+0x64>
	{
		timer2Start();
 4f4:	0e 94 65 02 	call	0x4ca	; 0x4ca <timer2Start>
		for(index=0;index<u16_delay_in_ms;index++){
 4f8:	a1 2c       	mov	r10, r1
 4fa:	b1 2c       	mov	r11, r1
 4fc:	81 14       	cp	r8, r1
 4fe:	91 04       	cpc	r9, r1
 500:	a1 04       	cpc	r10, r1
 502:	b1 04       	cpc	r11, r1
 504:	b9 f0       	breq	.+46     	; 0x534 <timer2DelayMs+0x5e>
 506:	c1 2c       	mov	r12, r1
 508:	d1 2c       	mov	r13, r1
 50a:	76 01       	movw	r14, r12
			timer1Set(256 - Number_of_tick_per_ms); // Preload with 6 counts if prescaler 64
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 43 02 	call	0x486	; 0x486 <timer1Set>
			while(!(TIFR & (1 << 6)));
 514:	08 b6       	in	r0, 0x38	; 56
 516:	06 fe       	sbrs	r0, 6
 518:	fd cf       	rjmp	.-6      	; 0x514 <timer2DelayMs+0x3e>
			TIFR |= (1 << 6);
 51a:	88 b7       	in	r24, 0x38	; 56
 51c:	80 64       	ori	r24, 0x40	; 64
 51e:	88 bf       	out	0x38, r24	; 56
	Number_of_tick_per_ms= FCPU /(64000) ; //64 * 1000 // prescaler 64
	
	if(TIMER1_MODE == T1_NORMAL_MODE) //
	{
		timer2Start();
		for(index=0;index<u16_delay_in_ms;index++){
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	c8 1a       	sub	r12, r24
 524:	d8 0a       	sbc	r13, r24
 526:	e8 0a       	sbc	r14, r24
 528:	f8 0a       	sbc	r15, r24
 52a:	c8 14       	cp	r12, r8
 52c:	d9 04       	cpc	r13, r9
 52e:	ea 04       	cpc	r14, r10
 530:	fb 04       	cpc	r15, r11
 532:	60 f3       	brcs	.-40     	; 0x50c <timer2DelayMs+0x36>
			timer1Set(256 - Number_of_tick_per_ms); // Preload with 6 counts if prescaler 64
			while(!(TIFR & (1 << 6)));
			TIFR |= (1 << 6);
		}
		timer2Stop();
 534:	0e 94 69 02 	call	0x4d2	; 0x4d2 <timer2Stop>
 538:	1e c0       	rjmp	.+60     	; 0x576 <timer2DelayMs+0xa0>
	}
	else
	{
		OCR2 = Number_of_tick_per_ms-1;
 53a:	89 ef       	ldi	r24, 0xF9	; 249
 53c:	83 bd       	out	0x23, r24	; 35
		timer2Start();
 53e:	0e 94 65 02 	call	0x4ca	; 0x4ca <timer2Start>
		for(index=0;index<u16_delay_in_ms;index++){
 542:	a1 2c       	mov	r10, r1
 544:	b1 2c       	mov	r11, r1
 546:	81 14       	cp	r8, r1
 548:	91 04       	cpc	r9, r1
 54a:	a1 04       	cpc	r10, r1
 54c:	b1 04       	cpc	r11, r1
 54e:	89 f0       	breq	.+34     	; 0x572 <timer2DelayMs+0x9c>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	dc 01       	movw	r26, r24
			while(!(TIFR & (1 << 7)));
 556:	08 b6       	in	r0, 0x38	; 56
 558:	07 fe       	sbrs	r0, 7
 55a:	fd cf       	rjmp	.-6      	; 0x556 <timer2DelayMs+0x80>
			TIFR |= (1 << 7);
 55c:	28 b7       	in	r18, 0x38	; 56
 55e:	20 68       	ori	r18, 0x80	; 128
 560:	28 bf       	out	0x38, r18	; 56
	}
	else
	{
		OCR2 = Number_of_tick_per_ms-1;
		timer2Start();
		for(index=0;index<u16_delay_in_ms;index++){
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	a1 1d       	adc	r26, r1
 566:	b1 1d       	adc	r27, r1
 568:	88 15       	cp	r24, r8
 56a:	99 05       	cpc	r25, r9
 56c:	aa 05       	cpc	r26, r10
 56e:	bb 05       	cpc	r27, r11
 570:	90 f3       	brcs	.-28     	; 0x556 <timer2DelayMs+0x80>
			while(!(TIFR & (1 << 7)));
			TIFR |= (1 << 7);
		}
		timer2Stop();
 572:	0e 94 69 02 	call	0x4d2	; 0x4d2 <timer2Stop>
		
	}
	
	
}
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	bf 90       	pop	r11
 580:	af 90       	pop	r10
 582:	9f 90       	pop	r9
 584:	8f 90       	pop	r8
 586:	08 95       	ret

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
